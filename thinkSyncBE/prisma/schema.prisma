generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  username           String?  @unique
  displayName        String?
  email              String?  @unique
  password           String?
  googleId           String?  @unique
  googleAccessToken  String?
  googleRefreshToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  details   UserDetails?
  followers Follows[]    @relation("followers")
  following Follows[]    @relation("following")
  topics    UserTopic[]
  likes     Like[]
  posts     Post[]
  comments  Comment[]
  mentions  Mention[]
  Bookmark  Bookmark[]

  sentMessages       Message[]            @relation("sentMessages")
  receivedMessages   Message[]            @relation("receivedMessages")
  PasswordResetToken PasswordResetToken[] @relation("PasswordResetToken")

  Contentreport Contentreport[]
  UserActivity  UserActivity[]
  AdminAuditLog AdminAuditLog[]

  NotificationsSent     Notifications[] @relation("NotificationSender")
  NotificationsReceived Notifications[] @relation("NotificationReceiver")
  commentLikes          CommentLike[]
}

model UserDetails {
  id                  String    @id @default(uuid())
  avatar              String?
  coverImage          String?
  bio                 String?
  github              String?
  occupation          String?
  linkedin            String?
  twitter             String?
  location            String?
  website             String?
  role                String?
  dateOfBirth         DateTime?
  themePreference     String?   @default("dark")
  MessageNotification Boolean?  @default(true)
  Mailnotification    Boolean?  @default(true)
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("sentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Follows {
  id         String @id @default(uuid())
  follower   User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following   User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Topic {
  id             String           @id @default(uuid())
  name           String           @unique
  users          UserTopic[]
  posts          PostTopic[]
  TrendingTopics TrendingTopics[]
}

model UserTopic {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  @@unique([userId, topicId])
}

model Post {
  id        String   @id @default(uuid())
  content   String
  type      String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes         Like[]
  topics        PostTopic[]
  media         Media[]
  comments      Comment[]
  mentions      Mention[]
  links         Link[]
  Bookmark      Bookmark[]
  notifications Notifications[] @relation("NotificationPost")
}

model Link {
  id     String @id @default(uuid())
  url    String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model PostTopic {
  id      String @id @default(uuid())
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  @@unique([postId, topicId])
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id            String          @id @default(uuid())
  content       String
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  post          Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  parent        Comment?        @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String?
  replies       Comment[]       @relation("CommentToReplies")
  likes         CommentLike[]
  createdAt     DateTime        @default(now())
  notifications Notifications[] @relation("NotificationComment")
}

model CommentLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Media {
  id     String @id @default(uuid())
  url    String
  type   String // "image", "video", "link"
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Mention {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  used      Boolean? @default(false)
  User      User     @relation("PasswordResetToken", fields: [userId], references: [id], onDelete: Cascade)
}

model Notifications {
  id      String @id @default(uuid())
  content String

  sender     User   @relation("NotificationSender", fields: [senderId], references: [id])
  senderId   String
  receiver   User   @relation("NotificationReceiver", fields: [receiverId], references: [id])
  receiverId String

  post      Post?    @relation("NotificationPost", fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation("NotificationComment", fields: [commentId], references: [id])
  commentId String?

  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Contentreport {
  id             String   @id @default(uuid())
  type           String // "post", "comment", "user"
  reason         String
  postId         String?
  commentId      String?
  reportedUserId String?
  reporter       User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId     String
  createdAt      DateTime @default(now())
  status         String   @default("pending") // "pending", "accepted", "rejected"
}

model UserActivity {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String // "view_post", "like", "bookmark", "follow", "comment"
  postId    String?
  topicId   String?
  targetId  String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model TrendingTopics {
  id        String   @id @default(uuid())
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  rank      Int
  count     Int
  updatedAt DateTime @updatedAt
}

model AdminAuditLog {
  id         String   @id @default(uuid())
  admin      User     @relation(fields: [adminId], references: [id])
  adminId    String
  action     String // "deleted_post", "banned_user", "updated_topic"
  targetType String?
  targetId   String?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([adminId, createdAt])
  @@index([targetType, targetId])
}

model user_sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_user_sessions_expire")
}
